# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Pull Request Test

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3.0.2

      - uses: dorny/paths-filter@v2
        id: changes

        with:
          filters: |
            application:
              - 'build.gradle'
              - 'src/**'

      - name: JDK 설치
        if: steps.changes.outputs.application == 'true'
        uses: actions/setup-java@v3

        with:
          distribution: zulu
          java-version: 17
          cache: 'gradle'

      - name: Gradle Build
        if: steps.changes.outputs.application == 'true'
        run: ./gradlew build --parallel

      # Generate Jacoco coverage report after building the project.
      - name: Generate Jacoco coverage report
        if: steps.changes.outputs.application == 'true'
        run: ./gradlew jacocoTestReport

      # Upload the generated Jacoco coverage report to Codecov.
      - name: Upload coverage to Codecov
        if: steps.changes.outputs.application == 'true'
        uses: codecov/codecov-action@v3

        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: './build/jacoco/jacoco.xml'

  style-test:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3.0.2

      - uses: dorny/paths-filter@v2
        id: changes

        with:
          filters: |
            application:
              - 'build.gradle'
              - 'src/**'

      - name: JDK 설치
        if: steps.changes.outputs.application == 'true'
        uses: actions/setup-java@v3

        with:
          distribution: zulu
          java-version: 17
          cache: 'gradle'

      # Check the code style after setting up JDK.
      - name: Style Check
        if: steps.changes.outputs.application == 'true'
        run: ./gradlew spotlessCheck
