plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.11'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.21.0'
}


group = 'io.jaeyeon'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-crypto:5.7.6'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.1)
            }

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(100)
            }

            excludes = List.of(
                    "*.test.*",
                    "*.controller.*",
                    "io.jaeyeon.numblemybox.App",
            )
        }
    }
}

tasks.register('updateGitHooks', Copy) {
    from './scripts/pre-commit'
    into './.git/hooks'
    fileMode 0775
}
compileJava.dependsOn updateGitHooks

spotless {
    java {
        target("**/*.java")   // 모든 Java 파일을 대상
        googleJavaFormat()    // Google Java Format을 사용
        removeUnusedImports() // 사용하지 않는 Import를 제거
        trimTrailingWhitespace() // 라인 끝의 공백을 제거
        indentWithSpaces(4)   // 공백 4개를 사용하여 들여쓰기
        endWithNewline()      // 파일의 끝에 새 줄을 추가
    }
}
